<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.kh.winepicker" />
	
	<!--================== 비동기 요청 처리를 위한 jsonView bean객체 등록 ============-->
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView">
		<beans:property name="contentType" value="application/json; charset=utf-8"/>
	</beans:bean>
	
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<!-- 처리순서가 1순위로 처리되도록 하고 올바른 bean객체를 찾지 못한 경우 기본 viewResolver가 작동하게끔 처리 -->
		<beans:property name="order" value="1"/>
	</beans:bean>
	
	<!-- ==================== 인터셉터 등록 영역 시작 =============================== -->
	<!--	=== Interceptor ===  
		: 디스패쳐 서블릿이 컨트롤러로 요청내용을 전달할 때 인터셉터가 중간에 요청을 가로챈다.
			=> 로그인 체크, 권한 체크, 프로그램 실행시간 체크, 로그 확인 등에 사용
	-->
	<!-- <interceptors>
		<interceptor>
			<mapping path="/**"/>
			<beans:bean class="com.kh.winepicker.common.interceptor.BoardTypeInterceptor"/>
		</interceptor>
		
		사용자 정보를 로깅처리
		<interceptor>
			<mapping path="/**"/>
			<beans:bean class="com.kh.winepicker.common.interceptor.LoggingInterceptor"/>
		</interceptor>
		
		로그인 체크여부 인터셉터
		<interceptor>
			<mapping path="/board/**"/>
			<mapping path="/chat/**"/>
			
			제외할 url
			<exclude-mapping path="/board/list/**"/>
			
			<beans:bean class="com.kh.winepicker.common.interceptor.LoginInterceptor"/>
		</interceptor>
		
	</interceptors> -->
	<!-- ==================== 인터셉터 등록 영역 종료 =============================== -->
	
	
	<!-- ====================== 웹소켓 등록 영역 시작 ============================== -->	
	<!-- 웹소켓으로 연결 요청, 메시지 전송 등의 기능을 수행할 클래스의 별칭(bean객체의 이름) : chatWebsocket -->
	<!-- <websocket:handlers>
		웹소켓으로 연결 요청 주소를 처리할 bean객체 대입
		<websocket:mapping handler="chatWebsocket" path="/chat"/>
		
		<websocket:handshake-interceptors>
			http통신에서 request와 response를 가로챈 후 httpSession의 정보를 WebSocketSession에 넣어주는 객체
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>	
		
		sockjs라이브러리를 통해 만들어진 웹소켓 객체임을 의미한다.
		<websocket:sockjs />
	</websocket:handlers> -->
	<!-- ====================== 웹소켓 등록 영역 종료 ============================== -->
	
	<!-- =========================== AOP 시작 ==================================== -->
	<aop:aspectj-autoproxy proxy-target-class="false"/>
	<!-- =========================== AOP 종료 ==================================== -->
	
	
	
</beans:beans>
